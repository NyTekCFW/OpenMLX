v1.0.0:
-Initial Release

v1.1.0:
-Fix ml_size with lines rendering
-Added ml_overwrite :
	-if you use ml_savemesh, u can set ml_overwrite(&s, 1) to make a loop on the image
	like if a vertex is out of the image at the right the vertex will go at the left of screen.

v1.1.1
-Fix ml_overwrite: added a temporary x position to fix ml_overwrite

v1.1.2
-Optimization of each functions
-Implemented SMO method (SIMD(Single Instruction Multiple Data) Optimization)
-Added flag -Wall -Werror -Wextra -O3 to optimize at maximum the code
-Added flag -march=native to compile with the architecture type of the computer
-Added xwrite(int fd, const void *data, size_t data_size) : write function with error handler
	(added to not get any conflict with -O3 flag)
-Information / explanation of each functions
-Added a way to take a screenshot of a image and export it
-Added a way to load a screenshot of a image exported and print it
-Added a way to track / record an specified image with the possibility
	to select the number of frame skipped and export it (maximum 4Go)
-Added a way to play the exported video of the track / record at a
	specified position on the window
-Video can be paused or resumed

v1.1.3
-Better organization of structures / prototype functions in .h files
-removed x and y from t_ui structure

v1.1.4
-replaced (t_shaders *sh) to (char *name) on ml_savemesh function
-removed flag -march=native of the makefile (can make random crash with valgrind)
-better organization of .c files
-Added hook functions _r = release _p = pressed _m = motion:
	void	start_hook(void);
	int	hook_keyboard_r(int ks, t_ml *lx);
	int	hook_keyboard_p(int ks, t_ml *lx);
	int	hook_mouse_p(int ks, int x, int y, t_ml *lx);
	int	hook_mouse_r(int ks, int x, int y, t_ml *lx);
	int	hook_mouse_m(int x, int y, t_ml *lx);
	int	hook_render(t_ml *lx);
	start_hook(); will launch all of them with t_ml* in arg
-added key system handler:
	-register a key:
	lx->config.button[BUTTON_MOVE_FORWARD] = XK_w;
	add_keycode(lx->config.button[BUTTON_MOVE_FORWARD], pmove_forward);
	-execute key function:
	into hook_render function add : execute_keyboard();
	-detect if a specified key is pressed:
	if (key_pressed(get_key(BUTTON_MOVE_FORWARD)->id)
	...
-added image brightness effect:
	void	brightness_img(char *name, float i);
	brightness_img("framework", 0.4f);
	0.5f = normal, > 0.5f = Transition to white, < 0.5f = Transition to black
-New export path: EXPORT_PATH = "./textures/export/"
-Exported image format : image.ilx
-Exported video format : video.vlx
-Added char	*get_video_path(char *buffer, char *name);
-Exported Video and exported image are now automatically stored into "./textures/export/"
-void	init_record(char *name, char *track_img, int rate) -> init_record("gameplay", "framework", 1);
-void	start_video(char *name, int rate); -> start_video("gameplay", 1);
-Added char *xitoa(__int64_t nbr); (/!\ memory allocation, think about use a xfree after use)

v1.1.5
-New SIMD optimization and fix
-Added Color Picker (based on Immediate Mode GUI(imGUI))
	look eg_main.c to see implementation
-Fixed leak / segfault / invalid write - read error
-Added Callback for hook (lx->render_callback)...
	callback functions need to be setup like the hook with the same arguments
	e.g : lx->render_callback = rendering; void rendering(t_ml *lx);
-Fixed export_img, video export... (using an uninitialized value)
-Added void	fill_shader_color(char *name, __uint32_t color)
-Removed useless data in t_shaders
	all old exported img will not work and will crash if you try to load it,
	to fix it you need GHex(linux) or any other Hxd editor, open your .ilx image
	remove the 8 next bytes at offset 0x4.
-Added cpicker_bar.ilx cpicker_bkg.ilx cpicker_cursor.ilx textures in export folder.
	do not remove it, this texture are here to make work properly the color picker.
-Fixed record_logo.ilx textures
-Added Exit Hook, u can close now the window without using ctrl + c

v1.1.6
-Rebuild of some random number functions (based on rand functions and xorshift128):
	void			xsrand(__uint32_t seed);
	int			xrand(void);
	int			xrandint(int min, int max);
	int			xorrand(void);
	int			xorrandint(int min, int max);

v1.1.7 (Final Update)
-Added a Debug Menu (ImGui)
-Possibility to resize a image with:
	void	resize_img(char *name, int width, int height);
-Possibility to print float value (/!\ memory allocation, think about use a xfree after use):
	char	*va_float(float v, __uint32_t i); (i = precision ex : 4 = x.xxxx)
-Added a way to print long value in hex / binary / decimal
	char	*va_hex(__int64_t v, __int64_t base);//base = 2 | 10 | 16
-Added linear_scaling
	double	linear_scaling(double value, double min, double max, double w)
-Added inverse_scaling
	double	inverse_scaling(double position, double min, double max, double w)
-Added a way to build a rectangle with primitive directly:
	t_prim	ml_quad(t_vec2 origin, t_vec2 scale, __uint32_t color);
-Added a way to build a triangle with primitive directly:
	t_prim	ml_triangle(t_vec2 p1, t_vec2 p2, t_vec2 p3, __uint32_t color);
	
Futur Update :
Coding everything myself has been an incredible experience. I've learned numerous methods to optimize, improve code, and convert data. However, after the 1.1.7 update, I don't foresee adding any major new features. I might explore ways to enhance the 3D aspects, but I want to start other projects. Any future updates will primarily focus on bug fixes or add some little functions.

